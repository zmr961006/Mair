关于分布式逻辑层的详细设计：

1.启动部分
客户端和服务器都配置同样的IP和端口信息，客户端保证在开始的时候存在所有路由的路径，每个服务器端也必须存在所有的转发路由表。
此时，客户端有能力给任意的一个服务器发送消息。并且服务器之间也可以互相转发消息，服务器之间使用伪客户端连接，并且使用相应数据结构保存其中一条链接。
网络拓扑结构此时为网状结构，共存在n*(n-1)/2 条路径，对于只有最多十多个节点的服务器系统来说也并没有太大负担，而且长链接仅仅是服务器之间的伪客户端之间存在。其余正常业务都是断链接。
客户端每次发送数据之前需要先发送一个测试数据报，保证自己的路由表和服务端的路由表是一致的

2.数据流
数据由客户端根据指令输入，客户端对指令进行解析与效验，组装数据报，哈希出关键值，然后根据关键值在路由表中对比，根据选取结果，发送到相应的服务端。
服务端接受到数据后，解析按照既定协议解析数据格式，根据指令执行相应操作，将数据保存。


3.数据迁移
当一个节点准备下线时，首先向所有服务端广播自己的下线消息，其他节点则立刻调整自己的路由表；其中调整方式主要是调整路径和修改哈希值，并且逐步扩散给客户端。然后冻结自己的数据存储系统，并根据算法将自己的存储数据全部转发到相关的节点接受。
当一个节点准备上线时，首先向所有服务端广播自己的上线消息，其他节点则立刻调整自己的路由表；其中调整方式主要是调整路径和修改哈希值，并且逐步扩散给客户端。打开业务系统，开始处理接受数据。

4其中关于数据迁移的两个问题：
 第一个：若节点开始下线，在完全下线前发送来的数据如何处理：当广播完成后，我们可以确定所有的后续业务一定不会再和这个节点有任何关系，但是完全的广播需要时间，可能需要数分钟时间，此时下线节点会逐渐关闭所有的客户端链接，此时客户端已经无法在发送数据到这个节点，客户端自然就会进入复位转发表的流程，就是访问其他的节点刷新自己的路由，并处理最后的数据，所以每个节点需要两个路由转发表，其中一个作为最新版本，另一个为上一个版本的备份。所以在数据迁移时并不会有数据丢失的现象。
 第二个：若节点立刻被强制下线，则需要使用备份节点，这设计备份策略，在本系统中只有备份策略的算法描述和设计，暂不涉及实现。



命令设计部分：

键值控制部分：DEL 

字符串部分：SET   GET

哈系表部分：

列表部分：

集合部分：

有序集合部分：

事物部分：

服务器部分：

链接部分：

监控部分：







